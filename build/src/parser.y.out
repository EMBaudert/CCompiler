Terminals unused in grammar

   DO
   WHILE
   IF
   ELSE
   INT
   VOID
   RETURN
   COLON
   COMMA
   SEMICOLON
   BRACE_OPEN
   BRACE_CLOSE
   BRACKET_OPEN
   BRACKET_CLOSE
   PARA_OPEN
   PARA_CLOSE
   ID
   ASSIGN
   LOGICAL_OR
   LOGICAL_AND
   EQ
   NE
   LS
   LSEQ
   GTEQ
   GT
   SHIFT_LEFT
   SHIFT_RIGHT
   PLUS
   MINUS
   MUL
   DIV
   MOD
   LOGICAL_NOT
   UNARY_MINUS
   UNARY_PLUS


Grammar

    0 $accept: program $end

    1 program: NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
DO (258)
WHILE (259)
IF (260)
ELSE (261)
INT (262)
VOID (263)
RETURN (264)
COLON (265)
COMMA (266)
SEMICOLON (267)
BRACE_OPEN (268)
BRACE_CLOSE (269)
BRACKET_OPEN (270)
BRACKET_CLOSE (271)
PARA_OPEN (272)
PARA_CLOSE (273)
ID (274)
NUM (275) 1
ASSIGN (276)
LOGICAL_OR (277)
LOGICAL_AND (278)
EQ (279)
NE (280)
LS (281)
LSEQ (282)
GTEQ (283)
GT (284)
SHIFT_LEFT (285)
SHIFT_RIGHT (286)
PLUS (287)
MINUS (288)
MUL (289)
DIV (290)
MOD (291)
LOGICAL_NOT (292)
UNARY_MINUS (293)
UNARY_PLUS (294)


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 1, on right: 0


State 0

    0 $accept: . program $end
    1 program: . NUM

    NUM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: NUM .

    $default  reduce using rule 1 (program)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 3


State 3

    0 $accept: program $end .

    $default  accept
